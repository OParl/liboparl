#
    # CMakeLists.txt
    # Copyright (C) 2012, 2013, Valama development team
    #
    # Valama is free software: you can redistribute it and/or modify it
    # under the terms of the GNU General Public License as published by the
    # Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Valama is distributed in the hope that it will be useful, but
    # WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    # See the GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License along
    # with this program.  If not, see <http://www.gnu.org/licenses/>.
    #

    cmake_minimum_required(VERSION "2.8.4")

    include("${CMAKE_SOURCE_DIR}/cmake/project.cmake")
    include("${CMAKE_SOURCE_DIR}/cmake/Common.cmake")

    project("${project_name}" C)
    string(TOLOWER "${project_name}" project_name_lower)

    set(bindir "bin")
    set(datarootdir "share")
    set(libdir "lib")
    set(includedir "include")
    set(datadir "${datarootdir}/${project_name_lower}")
    set(uidir "${datadir}/ui")
    set(localedir "${datarootdir}/locale")
    set(appdir "${datarootdir}/applications")
    set(gsettingsdir "${datarootdir}/glib-2.0/schemas")
    set(pixrootdir "${datarootdir}/pixmaps")
    set(pixdir "${pixrootdir}/${project_name_lower}")
    set(docdir "${datadir}/doc")
    set(mandir "${datarootdir}/man")
    set(mimedir "${datarootdir}/mime/packages")
    set(typelibdir "${libdir}/girepository-1.0")
    if(CMAKE_INSTALL_PREFIX)
      set(install_prefix "${CMAKE_INSTALL_PREFIX}/")
    else()
      set(install_prefix)
    endif()

    list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/vala")
    list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

    find_package(Vala "0.20" REQUIRED)
    set(pc_prefix ${CMAKE_INSTALL_PREFIX})
    set(pc_exec_prefix "\${prefix}")
    set(pc_libdir "\${exec_prefix}/${libdir}")
    set(pc_includedir "\${prefix}/${includedir}")
    set(pc_datarootdir "\${prefix}/${datarootdir}")
    set(pc_vapidir "\${datarootdir}/vala-${VALA_SHORTVER}/vapi")
    set(pc_version "${${project_name}_VERSION}")

    # Configure template files.
    set(stripped_pkgs)
    set(stripped_pkgs_pkgconfig)
    foreach(pkgstr ${required_pkgs})
      set(matchit)
      string(REGEX MATCH "([^{ \t]*)[ \t]*{([^}]+,|)[ \t]*nocheck[ \t]*(|,[^}]+)}[ \t]*$" matchit ${pkgstr})
      string(REGEX REPLACE "^([^{ \t]*)[ \t]*{[^{}]*}[ \t]*$" "\\1" pkg ${pkgstr})
      if(NOT matchit)
        list(APPEND stripped_pkgs_pkgconfig "${pkg}")
      endif()

      string(REGEX REPLACE "^([^ \t]+).*" "\\1"  pkg_pkgconfig "${pkgstr}")
      list(APPEND stripped_pkgs "${pkg_pkgconfig}")
    endforeach()
    base_list_to_delimited_string(pc_requirements
      DELIM " "
      BASE_LIST ${stripped_pkgs_pkgconfig}
    )
    configure_file("${project_name_lower}.pc.in" "${project_name_lower}.pc" @ONLY)
    
    base_list_to_delimited_string(deps_requirements
    DELIM "\n"
    BASE_LIST ${stripped_pkgs}
   )
   configure_file("${project_name_lower}.deps.in" "${project_name_lower}.deps")# Custom library version checks.
    set(definitions)
    set(vapidirs)
    find_package(PkgConfig)
    # config
    list(REMOVE_ITEM required_pkgs "config {nocheck,nolink}")
    # gobject-2.0
    pkg_check_modules(GOBJECT2.0 REQUIRED "gobject-2.0")

    set(default_vala_flags
      "--thread"
      "--target-glib" "${GOBJECT2.0_VERSION}"
    )

    include(ValaPkgs)
    vala_pkgs(VALA_C
      PACKAGES
        ${required_pkgs}
      DEFINITIONS
        ${definitions}
      OPTIONAL
        ${optional_pkgs}
      SRCFILES
        ${srcfiles}  LIBRARY
        "${project_name_lower}"
      GIRFILE
        "${project_name}-${${project_name}_VERSION}"  VAPIS
        ${vapifiles}
      OPTIONS
        ${default_vala_flags}
        ${vapidirs}
    )
    add_library("${project_name_lower}" SHARED ${VALA_C})
    set_target_properties("${project_name_lower}" PROPERTIES
        VERSION "${${project_name}_VERSION}"
        SOVERSION "${soversion}"
    )
    target_link_libraries("${project_name_lower}" ${PROJECT_LDFLAGS})
    add_definitions(${PROJECT_C_FLAGS})# Set common C-macros.
    add_definitions(-DPACKAGE_NAME="${project_name}")
    add_definitions(-DPACKAGE_VERSION="${${project_name}_VERSION}")
    if(project_root)
      add_definitions(-DGETTEXT_PACKAGE="${project_root}")
    else()
      add_definitions(-DGETTEXT_PACKAGE="${project_name_lower}")
    endif()
    add_definitions(-DPACKAGE_DATA_DIR="${install_prefix}${datadir}")
    add_definitions(-DPACKAGE_UI_DIR="${install_prefix}${uidir}")
    add_definitions(-DLOCALE_DIR="${install_prefix}${localedir}")
    add_definitions(-DPIXMAP_DIR="${install_prefix}${pixdir}")
    add_definitions(-DVALA_VERSION="${VALA_SHORTVER}")
    install(TARGETS "${project_name_lower}" DESTINATION "${libdir}")
    install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${project_name_lower}.pc" DESTINATION "lib/pkgconfig")
    install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${project_name_lower}.h" DESTINATION "${includedir}")
    set(vapi_files "${CMAKE_CURRENT_BINARY_DIR}/${project_name_lower}.deps" "${CMAKE_CURRENT_BINARY_DIR}/${project_name_lower}.vapi")
    install(FILES ${vapi_files} DESTINATION "${VALA_VAPIDIR}")
    install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${project_name}-${${project_name}_VERSION}.gir" DESTINATION "${datarootdir}/gir-1.0")# Install user interface files if used and copy them to build directory.
    set(uifiles_build)
    install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${project_name}-${API_VERSION}.typelib" DESTINATION "${typelibdir}")# Install user interface files if used and copy them to build directory.
    foreach(uifile ${uifiles})
      add_custom_command(
        OUTPUT
          "${CMAKE_CURRENT_BINARY_DIR}/${uifile}"
        COMMAND
          "${CMAKE_COMMAND}" -E copy_if_different "${CMAKE_CURRENT_SOURCE_DIR}/${uifile}" "${CMAKE_CURRENT_BINARY_DIR}/${uifile}"
        DEPENDS
          "${CMAKE_CURRENT_SOURCE_DIR}/${uifile}"
        COMMENT ""
      )
      list(APPEND uifiles_build "${CMAKE_CURRENT_BINARY_DIR}/${uifile}")
      install(FILES ${uifile} DESTINATION "${uidir}")
    endforeach()
    add_custom_target("ui_copy_${project_name_lower}" DEPENDS ${uifiles_build})
    add_dependencies("${project_name_lower}" "ui_copy_${project_name_lower}")
    add_custom_target(typelib ALL
        COMMAND
            g-ir-compiler --shared-library=liboparl.so OParl-${${project_name}_VERSION}.gir
                          -o OParl-${API_VERSION}.typelib
        DEPENDS
            ${project_name_lower}
        COMMENT
            "Creating typelib"
    )
